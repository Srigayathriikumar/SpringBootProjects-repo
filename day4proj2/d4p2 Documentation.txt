The application allows users to add tickets and view a list of submitted tickets through a text-based menu. Each ticket is associated with a user and includes basic validation. Invalid inputs are handled using custom exceptions, and all errors are logged to a file named `error.log` with timestamps.
  
The project uses Java 21 and follows a modular structure with separate packages for models, services, and exceptions.

  FILE STRUCTURE
  
  day4proj2/
├── src/
│   ├── main/
│   │   └── java/
│   │       └── com/
│   │           └── day4proj2/
│   │               ├── App.java
│   │               ├── exceptions/
│   │               │   └── MissingFieldException.java
│   │               ├── main/
│   │               │   └── Main.java
│   │               ├── models/
│   │               │   ├── Ticket.java
│   │               │   └── User.java
│   │               └── services/
│   │                   └── TicketService.java
│   │
│   └── test/
│       └── (empty or test classes, not shown)
│
├── target/                      # Compiled output (generated by Maven)
├── .gitignore
├── error.log                    # Log file for exceptions
├── pom.xml                      # Maven project descriptor
└── Readme.md                    # Project documentation

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

  MissingFieldsException.java:
  
  package exceptions;

public class MissingFieldException extends Exception {
    public MissingFieldException(String message){
        super(message);
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Ticket.java:

  package models;

public class Ticket{
    public static int counter=100;
    private int ticketid;
    private  String source;
    private String dest;
    private User user;
    public Ticket(String source, String dest,User user) {
        
        this.ticketid=counter++;
        this.source = source;
        this.dest = dest;
        this.user=user;
    }
    
    public User getUser() {
        return user;
    }
    public String usrname(){
        return user.getName();
    }

    public int getTicketid() {
        return ticketid;
    }
    public String getSource() {
        return source;
    }
    public String getDest() {
        return dest;
    }
    public void tctdisplayDetails(){
        user.displayDetails();
        System.out.println(ticketid+" "+source+" "+dest);
    }
    
    
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

User.java:

package models;

public class User {
    private String name;
    private int age;
    public User(String name, int age) {
        this.name = name;
        this.age = age;
    }
    public String getName() {
        return name;
    }
    public int getAge() {
        return age;
    }
    public void displayDetails(){
        System.out.print(name+" "+age+" ");
    }
}

TicketService.java:
package services;

import exceptions.MissingFieldException;
import models.*;
public class TicketService{
    public boolean Reportissue(Ticket ticket) throws MissingFieldException{
        boolean res=true;
        if(ticket.getSource().isEmpty() || ticket.getDest().isEmpty()){
            throw new MissingFieldException("The source and Destination fields are mandatory to fill\n");
        }
        System.out.println("The Ticket "+ticket.getTicketid()+" is reserved successfully\n");
        return res;
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Main.java:

package main;
import models.*;
import java.io.*;
import java.time.LocalDateTime;
import services.TicketService;
import java.util.*;

import exceptions.MissingFieldException;
public class Main {
    public static void main(String[] args) throws Exception{
    Scanner s=new Scanner(System.in);
    TicketService excep=new TicketService();
    List<Ticket> ticketlist=new ArrayList<>();
    boolean check=true;
    while(check){
        System.out.println("MENU:\n1.Add Ticket\n2.List Ticket\n3.Exit\nEnter your Option: ");
        int option=s.nextInt();
        switch(option){
            case 1:
            System.out.println("Enter username: ");
            String name=s.next();
            s.nextLine();
            System.out.println("Enter Age: ");
            int age=s.nextInt();
            s.nextLine();
            System.out.println("Enter Source: ");
            String source=s.nextLine();
            System.out.println("Enter Destination: ");
            String dest=s.nextLine();
            s.nextLine();
            User usr1=new User(name,age);
            Ticket tct1=new Ticket(source,dest,usr1);
            try{
            if(excep.Reportissue(tct1)){
            ticketlist.add(tct1);
            System.out.print(name);
            System.out.println("'s Ticket is Reserved Successfully !!");
            }

            }
            
            catch(MissingFieldException e){
                logError(LocalDateTime.now()+e.getMessage());
                System.out.println(e.getMessage());
            }
            break;
            case 2:
            System.out.println("The List of existing tickets are:");
            for(Ticket tct:ticketlist){
                tct.tctdisplayDetails();
            }
            break;
            case 3:
            System.out.println("-------------QUIT--------------");
            return;
            default:
            System.out.println("Invalid Input");
        }
        
    
    }
    }
public static void logError(String message) throws Exception{
    try(BufferedWriter writer=new BufferedWriter(new FileWriter("error.log",true))){
        writer.write(message);
    }
    catch(Exception e){
        System.out.println("Cannot write into the log file!!"+e.getMessage());
    }
}
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

SAMPLE OUTPUT:

MENU:
1.Add Ticket
2.List Ticket
3.Exit
Enter your Option: 
1
Enter username: 
emma
Enter Age: 
21
Enter Source: 
salem
Enter Destination: 
paris

The Ticket 100 is reserved successfully

emma's Ticket is Reserved Successfully !!
  
MENU:
1.Add Ticket
2.List Ticket
3.Exit
Enter your Option:
2
The List of existing tickets are:
emma 21 100 salem paris
  
MENU:
1.Add Ticket
2.List Ticket
3.Exit
Enter your Option:
1
Enter username:
kumar
Enter Age:
52
Enter Source:
namakkal
Enter Destination:
coimbatore

The Ticket 101 is reserved successfully

kumar's Ticket is Reserved Successfully !!
  
MENU:
1.Add Ticket
2.List Ticket
3.Exit
Enter your Option:
1
Enter username:
faiza
Enter Age:
67
Enter Source:

Enter Destination:
tirupur

The source and Destination fields are mandatory to fill
  
MENU:
1.Add Ticket
2.List Ticket
3.Exit
Enter your Option:
3
-------------QUIT--------------
  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------

  GITHUB LINK: https://github.com/Srigayathriikumar/SpringBootProjects-repo/new/main/day4proj2
